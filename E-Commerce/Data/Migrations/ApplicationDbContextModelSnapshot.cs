// <auto-generated />
using System;
using E_Commerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("dob")
                        .HasColumnType("date");

                    b.Property<string>("dp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("gender_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("modified_by")
                        .HasColumnType("int");

                    b.Property<int?>("nationality_id")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("gender_id");

                    b.HasIndex("nationality_id");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66feb4e1-2f1a-42e1-b5dc-7a12775b4d61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ab77101-b4bc-4dc9-9986-cc508e30d30d",
                            Email = "alamnaryab@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Fakhre Alam",
                            IsAdmin = true,
                            IsLocked = false,
                            LockoutEnabled = false,
                            MemberSince = new DateTime(2024, 10, 1, 11, 28, 13, 56, DateTimeKind.Local).AddTicks(1704),
                            NormalizedEmail = "ALAMNARYAB@GMAIL.COM",
                            NormalizedUserName = "ALAMNARYAB@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAgwzx5s+AhmTjSDN9xXrHZDKNl8YG8xao+5jUGw9tyTc+hDJX/R73bgdgTtRpEqng==",
                            PhoneNumber = "+111111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "04d6b296-74a4-4b6b-ac6d-3a693cd8ccb1",
                            TwoFactorEnabled = false,
                            UserName = "alamnaryab@gmail.com",
                            address = "UAE",
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = 1,
                            dob = new DateOnly(1992, 9, 29),
                            dp = "user1.png",
                            gender_id = 1,
                            nationality_id = 1,
                            status = 1
                        },
                        new
                        {
                            Id = "1da7364d-fc6b-4e3e-b290-56727fec2c65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "276362ce-72e3-4fef-a19e-54ff316295b4",
                            Email = "alamadcs@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Alam",
                            IsAdmin = false,
                            IsLocked = false,
                            LockoutEnabled = false,
                            MemberSince = new DateTime(2024, 10, 1, 11, 28, 13, 56, DateTimeKind.Local).AddTicks(1774),
                            NormalizedEmail = "ALAMADCS@GMAIL.COM",
                            NormalizedUserName = "ALAMADCS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAgwzx5s+AhmTjSDN9xXrHZDKNl8YG8xao+5jUGw9tyTc+hDJX/R73bgdgTtRpEqng==",
                            PhoneNumber = "+121111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "014b6990-e713-414c-86d4-8467adc71061",
                            TwoFactorEnabled = false,
                            UserName = "alamadcs@gmail.com",
                            address = "UAE",
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = 1,
                            dob = new DateOnly(1991, 9, 29),
                            dp = "user2.png",
                            gender_id = 1,
                            nationality_id = 1,
                            status = 1
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Gender", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("modified_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("sort")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            id = 1,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 1,
                            status = 1,
                            title = "Male"
                        },
                        new
                        {
                            id = 2,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "Female"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.LoginLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loggedin")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pre_ids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("E_Commerce.Models.Nationality", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("modified_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("sort")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 1,
                            status = 1,
                            title = "UAE"
                        },
                        new
                        {
                            id = 2,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "PAK"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Settings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("modified_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("sort")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            id = 1,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 1,
                            status = 1,
                            title = "app_name",
                            value = "AB ECommerce"
                        },
                        new
                        {
                            id = 2,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "logo",
                            value = "logo.png"
                        },
                        new
                        {
                            id = 3,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "currency",
                            value = "PKR"
                        },
                        new
                        {
                            id = 4,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "contact_number",
                            value = "03335662558"
                        },
                        new
                        {
                            id = 5,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "contact_email",
                            value = "support@codingsips.com"
                        },
                        new
                        {
                            id = 6,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "max_upload_size_in_mbs",
                            value = "5"
                        },
                        new
                        {
                            id = 7,
                            created = new DateTime(2024, 9, 29, 19, 45, 33, 0, DateTimeKind.Unspecified),
                            created_by = new Guid("00000000-0000-0000-0000-000000000001"),
                            sort = 2,
                            status = 1,
                            title = "allowed_upload_extensions",
                            value = ".jpg,.jpeg,.png,.pdf,.docx,.xlsx,.txt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Data.ApplicationUser", b =>
                {
                    b.HasOne("E_Commerce.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("gender_id");

                    b.HasOne("E_Commerce.Models.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("nationality_id");

                    b.Navigation("Gender");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("E_Commerce.Models.LoginLog", b =>
                {
                    b.HasOne("E_Commerce.Data.ApplicationUser", "User")
                        .WithMany("loginLogs")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Commerce.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Commerce.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Commerce.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Data.ApplicationUser", b =>
                {
                    b.Navigation("loginLogs");
                });

            modelBuilder.Entity("E_Commerce.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("E_Commerce.Models.Nationality", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
