@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @://Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:@@section Styles {
    @:<link rel="stylesheet" href="~/css/addons/datatables.min.css" />
    @:<link rel="stylesheet" href="~/css/buttons.dataTables.min.css" />
@:}
@:
@:<div class="page-content">
    @:<div class="card mb-3">
        @:<div class="card-body py-2"> 
            @:<a  asp-action="Create" class="btn-floating btn-info btn-sm m-0 waves-effect waves-light float-end" title="create new @Model.ViewDataTypeShortName"><i class="fa fa-plus"></i></a>            
            <h3 class="m-0">@Model.ViewName</h3>
        @:</div>
    @:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }

    @:<div class="card">
        @:<div class="card-body">
            @:<div class="table-responsive">
                @:<table class="sdt table table-striped table-hover table-bordered table-sm">
                    @:<thead class="aqua-gradient text-white">
                        @:<tr>
                            @:<th>@@Html.DisplayNameFor(model => model.id)</th>
                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
                        string[] excludedFields = new string[] { "remarks","sort","status","created","created_by","modified","modified_by" }; 
                        
                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property2)
                                && excludedFields.Any(s => item.Name == s))
                            { continue; }
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                            {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                            </th>
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                            {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                            </th>
                            }
                        }
                            @:<th class="actions">Actions</th>
                        @:</tr>
                    @:</thead>
                     

                @:</table> 
            @:</div><!--.table-responsive-->
        @:</div><!--.card-body-->
    @:</div><!--.card-->
@:</div><!--.page-content-->
@:
@:@@section Scripts {

    @:<script type="text/javascript" src="~/js/addons/datatables.min.js"></script>
    @:<script type="text/javascript" src="~/js/dataTables.buttons.min.js"></script>
    @:<script type="text/javascript" src="~/js/buttons.flash.min.js"></script>
    @:<script type="text/javascript" src="~/js/jszip.min.js"></script>
    @:<script type="text/javascript" src="~/js/pdfmake.min.js"></script>
    @:<script type="text/javascript" src="~/js/vfs_fonts.js"></script>
    @:<script type="text/javascript" src="~/js/buttons.html5.min.js"></script>
    @:<script type="text/javascript" src="~/js/buttons.print.min.js"></script>
    @:<script type="text/javascript" src="~/js/buttons.colVis.min.js"></script>
    @:<script type="text/javascript" src="~/js/bootstrap-datepicker.min.js"></script>

    @:<script>
        @:var sdt_obj = {
            @:columns: [
                @:{
                    @:'data': 'id',
                    @:"render": function (data, type, row, meta) {
                        @:return '<a href="@@Url.Action("details")/' + data + '" class="btn btn-rounded btn-sm btn-outline-info ripple-surface-dark py-1 my-0">' + data + '</a>';
                    @:}
                @:},
            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property2)
                                && excludedFields.Any(s => item.Name == s))
                            { continue; }
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsPrimaryKey)
                            {
                @:{'data': '@GetValueExpression(property)'},
                            }
                             
            }
                @:{
                    @:orderable: false,
                    @:searchable: false,
                    @:'data': function (row, type, val, meta) {
                        @:return '<a href="@@Url.Action("details")/' + row.id + '" class="btn btn-sm py-1 px-2 btn-info"><i class="fa fa-eye"></i></a> ' +
                            @:'<a href="@@Url.Action("edit")/' + row.id + '" class="btn btn-sm py-1 px-2 btn-warning"><i class="fa fa-pencil"></i></a> ' +
                            @:'<a href="@@Url.Action("delete")/' + row.id + '" class="btn btn-sm py-1 px-2 btn-danger"><i class="fa fa-trash"></i></a>';
    @:
                    @:}
                @:}
            @:],
            @:sAjaxSource: '@@Url.Action("getdata")'
        @:};
    @:</script>
    @:<script type="text/javascript" src="~/js/sdt2.js"></script>
@:}

    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}

