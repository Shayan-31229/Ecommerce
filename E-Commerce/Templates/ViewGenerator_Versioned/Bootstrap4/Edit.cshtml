@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @://Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="page-content">
    @:<div class="card mb-3">
        @:<div class="card-body py-2"> 
            @:<a  asp-action="Index" class="btn-floating btn-info btn-sm my-0 mx-1 waves-effect waves-light float-end" title="Go to listing page"><i class="fa fa-list"></i></a>            
            <h3 class="m-0">@Model.ViewName</h3>
        @:</div>
    @:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
    @:<form asp-action="@Model.ViewName" class="formLoader">
        @:<div class="card">
            @:<div class="card-body">
                @:
                @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @:
                @:<div class="row">
                    foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
                    {
                        var excludedFields = new string[] { "CreatedBy", "ModifiedBy", "CreatedDate", "ModifiedDate","created","created_by","modified","modified_by" };
                        if (excludedFields.Any(item => item.ToLower() == property.PropertyName.ToLower()))
                        {continue; } 

                        if (property.IsPrimaryKey)
                        {
                    @:<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 d-none">
                        @:<input type="hidden" asp-for="@property.PropertyName" />
                    @:</div><!--.col-->
                    @:
                            continue;
                        }

                        if (property.Scaffold)
                        {
                            if (property.IsReadOnly)
                            {
                                continue;
                            }

                    @:<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">

                            if (property.IsForeignKey)
                            {
                        @:<div class="form-group">
                            @:<label asp-for="@property.PropertyName" class="control-label"></label>
                            @:<select asp-for="@property.PropertyName" class ="form-control browser-default custom-select" asp-items="ViewBag.@property.PropertyName"></select>
                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                        @:</div>
                    @:</div><!--.col-->
                    @:
                                continue;
                            }

                            if (property.PropertyName.ToLower() == "status")
                            {
                        @:<div class="form-group">
                            @:<label asp-for="@property.PropertyName" class="control-label"></label>
                            @:<select asp-for="@property.PropertyName" class ="form-control browser-default custom-select">
                                @:<option value="1">Active</option>
                                @:<option value="0">Inactive</option>
                            @:</select>
                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                        @:</div>
                    @:</div><!--.col-->
                    @:
                                continue;
                            }

                            bool isCheckbox = property.TypeName.Equals("System.Boolean");
                            if (isCheckbox)
                            {
                        @:<div class="form-group form-check">
                            @:<label class="form-check-label">
                                @:<input class="form-check-input" asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                            @:</label>
                        @:</div>
                            }
                            else if (property.IsEnum && !property.IsEnumFlags)
                            {
                        @:<div class="form-group">
                            @:<label asp-for="@property.PropertyName" class="control-label"></label>
                            @:<select asp-for="@property.PropertyName" class="form-control browser-default custom-select"></select>
                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                        @:</div>
                            }
                            else if (property.IsMultilineText)
                            {
                        @:<div class="form-group">
                            @:<label asp-for="@property.PropertyName" class="control-label"></label>
                            @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                        @:</div>
                            }
                            else
                            {
                        @:<div class="form-group">
                            @:<label asp-for="@property.PropertyName" class="control-label"></label>
                            @:<input asp-for="@property.PropertyName" class="form-control" />
                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                        @:</div>
                            }
                    @:</div><!--.col-->
                    @:
                    }
                    // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
                    else if (property.IsForeignKey)
                    {
                    @:<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 d-none">
                        @:<input type="hidden" asp-for="@property.PropertyName" />
                    @:</div><!--.col-->
                    @:
                        continue;
                    }
                
                }
                @:</div><!--.row-->
            }  
            </div><!--.card-body-->
            <div class="card-footer">
                <button type="reset" class="btn btn-danger waves-effect"><i class="fa fa-refresh"></i> Reset</button>
                <button type="submit" class="btn btn-success waves-effect"><i class="fa fa-save"></i> Update</button>
            </div><!--.card-footer-->
        </div><!--.card-->
    </form>
 
</div><!--.page-content-->

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
